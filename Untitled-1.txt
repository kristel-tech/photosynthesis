
// var context = new AudioContext();
let startButton = document.getElementById("btnPlay");
let stopButton = document.getElementById("btnStop");


// oscillator1 = context.createOscillator();
// oscillator2 = context.createOscillator();
// oscillator3 = context.createOscillator();

// gainNode1 = context.createGain();
// gainNode2 = context.createGain();
// gainNode3 = context.createGain();


// oscillator1.type = "saw";
// oscillator1.frequency.value = 200; 
// oscillator1.connect(context.destination);
// gainNode1.connect(context.destination);
// gainNode2.gain.value = 0.9; 

// oscillator2.type = "square"; 
// oscillator2.frequency.value = 444; 
// oscillator2.connect(gainNode2); 
// gainNode2.connect(context.destination); 
// gainNode2.gain.value = 0.3; 
 

// oscillator3.type = "triangle"; 
// oscillator3.frequency.value = 50;
// oscillator3.connect(gainNode3); 
// gainNode3.connect(context.destination); 
// gainNode3.gain.value = 0.8;



// function noteOn() {
//     oscillator1.start(0); 
//     oscillator2.start(0);
//     oscillator3.start(0); 
// }


// function noteOff() {
//     oscillator1.stop(); 
//     oscillator2.stop();
//     oscillator3.stop(); 
// }

/////////////////////

// ADSR CLASS

var ADSR = function(options) {
    options = options || {};
    this.attack = options.attack || 0.02; // ...in seconds
    this.decay = options.decay || 0.02; // ...in seconds
    this.sustain = options.sustain || 0.5; // ...in amplitude
    this.release = options.release || 0.02; // ...in seconds
};

ADSR.prototype.connect = function(param) {
    this.params = this.params || [];
    this.params.push(param);
};

ADSR.prototype.disconnect = function() {
    this.params = null;
};

ADSR.prototype.play = function(now, duration) {
    this.params.forEach(function(param) {
        param.cancelScheduledValues(now);
        param.setValueAtTime(param.value || 0, now);
        param.linearRampToValueAtTime(1, now + this.attack);
        param.setValueAtTime(1, now + this.attack);
        param.linearRampToValueAtTime(this.sustain, now + this.attack + this.decay);
        param.setValueAtTime(this.sustain, now + duration - this.release);
        param.linearRampToValueAtTime(0, now + duration);
    }.bind(this));
    setTimeout(this.disconnect.bind(this), duration);
};


class synthesizer{
    constructor(oscillatorParameters){  //get values for each function
        this.createNodes();
        this.configure();
        this.connect()
    }
    createNodes(){
        this.osc1gain = context.createGain();
        this.osc2gain = context.createGain();
        this.filter = context.createBiquadFilter();
        this.pan = context.createPanner();
        this.gain = context.createGain();
    }
    config(){
        this.osc1gain.gain.value = 0.15;
        this.osc2gain.gain.value = 0.1;
        this.filter.type = 'lowpass';
        this.filter.frequency.value = 2000;
        this.filter.Q.value = 4;
        // this.pan.setPosition(0, 0, 0); use stereopanner
        this.gain.gain.value = 1;
    }
    connect(){
        this.osc1gain.connect(this.filter);
        this.osc2gain.connect(this.filter);
        this.filter.connect(this.pan);
        this.pan.connect(this.gain);
        this.gain.connect(context.destination);
    }
    play(now, freq, duration){

        //create the oscillators
        var osc1 = context.createOscillator();
        var osc2 = context.createOscillator();

        //create adsr gain nodes
        var adsr1gain = context.createGain();
        var adsr2gain = context.createGain();

        var adsr = new ADSR(this.dynamicConfig);

        osc1.frequency.value = 440;
        osc1.type = 'square';
        osc2.frequency.value = 440;
        osc2.type = 'sawtooth';
        osc2.detune.value = 5;

    // (4) Connect the oscillators to the ADSR gain nodes.
    osc1.connect(adsr1gain);
    osc2.connect(adsr2gain);

    // [given] Connect the ADSR to the ADSR gain nodes' AudioParam.
    adsr.connect(adsr1gain.gain);
    adsr.connect(adsr2gain.gain);

    // (5) Connect the ADSR gain nodes to `this.osc1gain` and `this.osc2gain`.
    adsr1gain.connect(this.osc1gain);
    adsr2gain.connect(this.osc2gain);

    // (6) Play the oscillators.
    //     Specify how long to play the oscillators.
    osc1.start(now);
    osc2.start(now);
    osc1.stop(now + duration);
    osc2.stop(now + duration);

    // [given] Play the ADSR.
    adsr.play(now, duration);
    }
}

// startButton.addEventListener("click", function (e) {
//     // console.log(e.target.dataset.frequency);
//   //  noteOn();
//     newOscNotepress = playNote(e.target.dataset.frequency);
//     newOscNotepress.start(0);
// });

// stopButton.addEventListener("click", function (e) {
//     noteOff();
// });
